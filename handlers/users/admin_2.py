from aiogram import types
from aiogram.dispatcher.filters import Text
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from aiogram.dispatcher import FSMContext

from DB.db2_manage import *
from DB.db3_manage import show_order_for_admin, do_point_warning
from keyboards.inline.panel_state_sighup import shablon
from loader import dp

from DB.db_manage import *
from keyboards.inline.panel_admin_2 import *
from states.red_price import *


async def shablon_e(callback : types.CallbackQuery, table, state : FSMContext, pm):
    read = await shablon_show_order(f'{table}')
    dict = {}

    markup = InlineKeyboardMarkup()
    for i in read:
        markup.add(InlineKeyboardButton(f'{i[0]}', callback_data=f'deli{pm}_{i[0]}'))
        dict[i[0]] = i[1]
    markup.add(InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data="redact_del"))

    async with state.proxy() as data:
        data['master_1'] = dict

    await callback.message.edit_text('–ö–∞–∫—É—é —É—Å–ª—É–≥—É —É–¥–∞–ª–∏—Ç—å? üíÜüèº‚Äç‚ôÄÔ∏è', reply_markup=markup)
    await callback.answer()


@dp.message_handler(commands='admin')
async def start_afmin(message : types.Message):
    di = await check_admin(message.from_user.id)
    if di == 'yes':
        await main_admin_panel(message)
    else:
        await message.answer('–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º')

@dp.callback_query_handler(Text(startswith='red_'))
async def red_price(callback : types.CallbackQuery):
    await red_price_panel(callback)



@dp.callback_query_handler(Text(startswith='redact'))
async def gg(callback : types.CallbackQuery):
    if callback.data == 'redact_add':
        await main_panel_for_edit(callback, cat='add', cat2='–í—ã–±–µ—Ä–∏—Ç–µ –≤ –∫–∞–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É')
    elif callback.data == 'redact_del':
        await main_panel_for_edit(callback, cat='del', cat2='–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É')
    if callback.data == 'redact_aa':
        markup = InlineKeyboardMarkup()
        but1 = InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞', callback_data='fake_admin')
        but2 = InlineKeyboardButton('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥', callback_data='red_cat')
        but3 = InlineKeyboardButton('–ü—Ä–æ—Å–º–æ—Ç—Ä –±–ª–∏–∂–∞–π—à–∏—Ö –∑–∞–ø–∏—Å–µ–π', callback_data='letmesee_order')
        markup.row(but1).row(but3).row(but2)
        await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é ‚öôÔ∏è', reply_markup=markup)
        await callback.answer()

# **************************** –£–¥–∞–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏


@dp.callback_query_handler(Text(startswith='del'), state=None)
async def delit(callback : types.CallbackQuery, state : FSMContext):
    data = callback.data[4:]
    pm = callback.data.split('_')[-1]
    print((data, pm))
    if data == 'order_face':
        await shablon_e(callback, table=f'{data}', state=state, pm=pm)
    elif data == 'order_lash':
        await shablon_e(callback, table=f'{data}', state=state, pm=pm)
    elif data == 'order_brow':
        await shablon_e(callback, table=f'{data}', state=state, pm=pm)
    elif data == 'order_depil':
        await shablon_e(callback, table=f'{data}', state=state, pm=pm)
    elif data == 'order_man':
        await shablon_e(callback, table=f'{data}', state=state, pm=pm)
    elif data == 'order_bar':
        await shablon_e(callback, table=f'{data}', state=state, pm=pm)
    elif data == 'order_care':
        await shablon_e(callback, table=f'{data}', state=state, pm=pm)
    elif data == 'order_else':
        await shablon_e(callback, table=f'{data}', state=state, pm=pm)

    if callback.data[:4] == 'deli':
        current = callback.data.split('_')
        await del_service(v1=f'{current[0][4:]}', v2=f'{current[1]}')
        await callback.message.edit_text('–£—Å–ª—É–≥–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞')


# **************************** –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏

@dp.message_handler(commands='stop_add', state="*")
async def do_this_shit(message : types.Message, state : FSMContext):
    await message.answer('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')
    await state.finish()

@dp.callback_query_handler(Text(startswith='add'), state=None)
async def addit(callback : types.CallbackQuery, state : FSMContext):
    async with state.proxy() as data:
        data['callback'] = callback.data
    await Client.name.set()

    await callback.message.edit_text('*–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:*\n\n/stop\_add -- –æ—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ', parse_mode=ParseMode.MARKDOWN)


@dp.message_handler(state=Client.name)
async def save_name(message : types.Message, state : FSMContext):
    name = message.text
    if len(name) > 32:
        await message.answer('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ üòï –ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–±–æ–ª–µ–µ 32 —Å–∏–º–≤–æ–ª–æ–≤), –ø–æ–ø—ã—Ç–∞–π—Ç–µ—Å—å —Å–æ–∫—Ä–∞—Ç–∏—Ç—å')
        await state.finish()
        await main_admin_panel(message)
    else:
        async with state.proxy() as data:
            data['name'] = name
        await message.answer(
            '*–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–æ–ª–Ω—è—é—Ç —Ä–∞–±–æ—Ç—É*\n–ï—Å–ª–∏ –∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ, —Ç–æ —Å—Ç—Ä–æ–≥–æ —á–µ—Ä–µ–∑ –æ–¥–Ω—É –∑–∞–ø—è—Ç—É—é.', parse_mode=ParseMode.MARKDOWN)
        await Client.next()


@dp.message_handler(state=Client.master)
async def save_master(message : types.Message, state:FSMContext):
    master = message.text
    async  with state.proxy() as data:
        data['master'] = master

    text = [
        f'*–ü—Ä–æ–≤–µ—Ä—Ç–µ –¥–µ—Ç–∞–ª–∏*',
        f'*—É—Å–ª—É–≥–∞:* {data["name"]}',
        f'*–º–∞—Å—Ç–µ—Ä:* {data["master"]}'
    ]
    await message.answer(text='\n'.join(text), reply_markup=await end_q(), parse_mode=ParseMode.MARKDOWN)

@dp.callback_query_handler(Text(startswith='do'), state=Client.master)
async def ggg(callback : types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        pass
    if callback.data == 'dothisshit':
        await insert_service(data['callback'][4:], data['name'], data['master'] )
        await callback.message.edit_text('–£—Å–ª—É–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞')
        await state.finish()
    else:
        await callback.message.edit_text('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')
        await state.finish()



# **************************** –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞-—Å–ø—Ä–∞–≤–∫–∞

@dp.callback_query_handler(Text(startswith='fake_admin'))
async def add_admin(callback : types.CallbackQuery):
    text = [
        '*–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞, –Ω–∞–¥–æ:* üë©üèª‚Äçüíª',
        '*1.* –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /stayadmin c —Ç–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω —Å—Ç–∞—Ç—å –∞–¥–º–∏–Ω–æ–º',
        '*2.* –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞: "50200"',
        '',
        '/admin -- –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è'

    ]
    await callback.message.edit_text(text='\n'.join(text), parse_mode=ParseMode.MARKDOWN)



# **************************** –ü—Ä–æ—Å–º–æ—Ç—Ä –±–ª–∏–∂–∞–π—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤

@dp.callback_query_handler(Text(startswith='letmesee'))
async def letmesee(callback : types.CallbackQuery):
    read = await show_order_for_admin()
    if len(read) >= 1:
        for i in read:
            text = [
                f'   *–ó–∞–∫–∞–∑* üîñ #{i[1]} ',
                f'*–î–∞—Ç–∞* - {i[3]}',
                f'*–£—Å–ª—É–≥–∞* - {i[2]}',
                f'*–í—Ä–µ–º—è* - {i[4]}',
                f'*–ú–∞—Å—Ç–µ—Ä* - {i[5]}',
                f'*–ù–æ–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞:* - {i[6]}'
            ]
            await callback.message.answer(text='\n'.join(text), reply_markup=await markup_for_warning(i),
                                          parse_mode=ParseMode.MARKDOWN)
    else:
        await callback.message.edit_text('–ù–∞ –±–ª–∏–∂–∞–π—à–∏–µ 2 –¥–Ω—è –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π')


@dp.callback_query_handler(Text(startswith='warn'))
async def do_warning(callback : types.CallbackQuery):
    d = callback.data.split('_')
    await bot.send_message(chat_id=d[1], text=f'–ù–∞–¥–ø–æ–º–∏–Ω–∞–µ–º ‚ò∫ —É –≤–∞—Å  –∑–∞–ø–∏—Å—å –≤ —Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã –Ω–∞ {d[3]} \n/myorders -- –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∑–∞–∫–∞–∑—ã')
    await do_point_warning(d[2])
    await callback.message.edit_text('–ö–ª–∏–µ–Ω—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–¥–ø–æ–º–∏–Ω–∞–Ω–∏–µ!')