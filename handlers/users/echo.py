from aiogram import types, Dispatcher

from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import CommandStart, CommandHelp
from aiogram.types import ParseMode, InlineKeyboardMarkup, InlineKeyboardButton

from DB.db2_manage import add_in_db_admin, del_in_db_admin
from keyboards.inline.panel_price import main_panel_price
from keyboards.inline.panel_state_sighup import main_panel
from loader import dp, bot
from states.sighup import Client
from states.add_admin import Admin


@dp.message_handler(commands='stayadmin', state=None)
async def add_admin(message : types.Message, state : FSMContext):
    await Admin.name.set()
    await message.answer('*–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞:*', parse_mode=ParseMode.MARKDOWN)


@dp.message_handler(commands='stop_admin')
async def add_admin(message : types.Message, state : FSMContext):
    await del_in_db_admin(message.from_user.id)
    await message.answer('–í—ã —Ç–µ–ø–µ—Ä—å –±–æ–ª—å—à–µ –Ω–µ –∞–¥–º–∏–Ω')


@dp.message_handler(state=Admin.name)
async def add_adm(message : types.Message, state : FSMContext):
    passw = message.text
    if passw == '50200':
        await add_in_db_admin(message.from_user.id)
        await message.answer('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º ü•≥ –í—ã —Ç–µ–ø–µ—Ä—å –æ–¥–∏–Ω –∏–∑ –∞–¥–º–∏–Ω–æ–≤\n/admin -- –ø–∞–Ω–µ–ª—å –¥–ª—è –∞–¥–º–∏–Ω–∞')
        await state.finish()
    else:
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å')
        await state.finish()


@dp.message_handler(CommandStart())
async def bot_start(message: types.Message):

    text = [
        f'*–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫*, {message.from_user.first_name} ü§ó',
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã *'–ö—Ä–µ–∞—Ç–∏ff'!*",
        '',
        '–ë—É–∫–≤–∞–ª—å–Ω–æ –∑–∞ –º–∏–Ω—É—Ç—É —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ü–µ–Ω—ã –∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –ø—Ä–æ—Ü–µ–¥—É—Ä—É ü§ì',
        '',
        '*–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é* (–º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ //–∫–æ–º–∞–Ω–¥—É):',
        '',
        'üñå /sighup -- –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º',
        '',
        'üí≥ /price -- —Ü–µ–Ω—ã –Ω–∞ –Ω–∞—à–∏ —É—Å–ª—É–≥–∏',
        '',
        'üìã /myorders -- –º–æ–∏ –∑–∞–∫–∞–∑—ã',
        '',
        'ü§ù /help -- –ø–æ–º–æ—â—å'
    ]

    await message.answer(text='\n'.join(text), parse_mode=ParseMode.MARKDOWN)


# *************************************************************
@dp.message_handler(commands='sighup', state=None)
async def start_state(message : types.Message):
    await Client.service.set()
    await main_panel(message)
#**************************************************************
@dp.message_handler(commands='price')
async def start_price(message : types.Message):
    await main_panel_price(message)
# ************************************************************

@dp.message_handler(CommandHelp())
async def bot_help(message: types.Message):
    text = (
        ""
        "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: ",
            "/start - –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥",
            "/help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É")
    ter =  '''
    üìç –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: /sighup, /price,   
/myordedrs, /help
üìç –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ: –∏–ª–∏ –Ω–∞–∂–∞—Ç—å –ø—Ä—è–º–æ –Ω–∞ –∫–æ–º–∞–Ω–¥—É (–æ–Ω–∞ –≤—ã–¥–µ–ª–µ—è–µ—Ç—Å—è —Å–∏–Ω–∏–º
 —à—Ä–∏—Ñ—Ç–æ–º) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –æ–±—ã—á–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.
üìç –ü–æ–∂–µ–ª–∞–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –∏ –æ—Ç–ª–∞–¥–∫–∏ –æ—à–∏–±–æ–∫ –º–æ–∂–µ—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç: @lielie45
    '''
    await message.answer(text=ter)



@dp.message_handler(state=None)
async def bot_echo(message: types.Message):

    await message.answer('–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ —Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É üëâüèº "/start"')


# # –≠—Ö–æ —Ö–µ–Ω–¥–ª–µ—Ä, –∫—É–¥–∞ –ª–µ—Ç—è—Ç –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
# @dp.message_handler(state="*", content_types=types.ContentTypes.ANY)
# async def bot_echo_all(message: types.Message, state: FSMContext):
#     state = await state.get_state()
#     await message.answer(f"–≠—Ö–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ <code>{state}</code>.\n"
#                          f"\n–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n"
#                          f"<code>{message}</code>")


# def reg_echo(dp : Dispatcher):
#     dp.register_message_handler(bot_start, commands='start'),
#     dp.register_message_handler(bot_help, commands='help'),
#     dp.register_message_handler(bot_echo)