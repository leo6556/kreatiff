import random

from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram import types, Dispatcher
from aiogram.types import ContentType

from states.sighup import *
from keyboards.inline.panel_state_sighup import *
from DB.db3_manage import *
from .echo import start_state

# –ù–ê–•–û–î–ò–¢–¨–°–Ø –í echo
# @dp.message_handler(commands='sighup', state=None)
# async def start_state(message : types.Message):
#     await Client.service.set()
#     await main_panel(message)

@dp.callback_query_handler(Text(startswith='order_'), state=Client.service)
async def show_category(callback : types.CallbackQuery, state : FSMContext):
    data = callback.data

    if data == 'order_face':
        await shablon(callback, table=f'{data}', state=state)
    elif data == 'order_lash':
        await shablon(callback, table=f'{data}', state=state)
    elif data == 'order_brow':
        await shablon(callback, table=f'{data}', state=state)
    elif data == 'order_depil':
        await shablon(callback, table=f'{data}', state=state)
    elif data == 'order_man':
        await shablon(callback, table=f'{data}', state=state)
    elif data == 'order_bar':
        await shablon(callback, table=f'{data}', state=state)
    elif data == 'order_care':
        await shablon(callback, table=f'{data}', state=state)
    elif data == 'order_else':
        await shablon(callback, table=f'{data}', state=state)

@dp.callback_query_handler(Text(startswith='resp_'), state=Client.service)
async def save_service(callback : types.CallbackQuery, state : FSMContext):

    async with state.proxy() as data:
        v = data['master_1']
        var = v[callback.data[5:]]
        data['service'] = callback.data[5:]
    await Client.next()
    await panel_of_masters(callback, var, state=state)

@dp.callback_query_handler(Text(startswith='mas_'), state=Client.master)
async def save_master(callback : types.CallbackQuery, state : FSMContext):
    async with state.proxy() as data:
        data['master'] = callback.data[4:]
    await Client.next()
    await panel_show_date(callback)

@dp.callback_query_handler(Text(startswith='date_'), state=Client.date)
async def save_date(callback : types.CallbackQuery, state : FSMContext):
    async with state.proxy() as data:
        data['date'] = callback.data[5:]
    await Client.next()
    await panel_show_time(callback)

@dp.callback_query_handler(Text(startswith='time_'), state=Client.time)
async def save_time(callback : types.CallbackQuery, state : FSMContext):
    async with state.proxy() as data:
        data['time'] = callback.data[5:]
    await share_contact(callback.message)


@dp.callback_query_handler(Text(startswith='send_'), state = Client.time)
async def do_it(callback : types.CallbackQuery):
    if callback.data == 'send_auto':
        but_1 = KeyboardButton('üëâüèº –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º üëàüèº', request_contact=True)
        markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add(but_1)
        await callback.message.delete()
        await callback.message.answer('–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º"', reply_markup=markup)
        await Client.next()
    else:
        await Client.next()
        await callback.message.edit_text('*–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä c* +7- –∏–ª–∏ 8-', parse_mode=ParseMode.MARKDOWN)


@dp.message_handler(state=Client.contact)
async def save_number(message : types.Message, state : FSMContext):
    cont = message.text
    id = message.from_user.id

    async with state.proxy() as data:
        rand = random.randint(1000, 9999)
        text = [
            f'*–í–∞—à –∑–∞–∫–∞–∑:* üîñ # {rand}',
            f'*–î–∞—Ç–∞* - {data["date"]}',
            f'*–£—Å–ª—É–≥–∞* - {data["service"]}',
            f'*–í—Ä–µ–º—è* - {data["time"]}',
            f'*–ú–∞—Å—Ç–µ—Ä* - {data["master"]}',
            f'*–í–∞—à –Ω–æ–º–µ—Ä* - {cont}',
            "",
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ üíÅ‚Äç‚ôÄÔ∏è"
        ]
        data['random'] = rand
        data['number'] = cont
        data['user_id'] = id

    await check_order(message, text)

@dp.message_handler(content_types=ContentType.CONTACT, state = Client.contact)
async def show_order(message : types.Message, state : FSMContext):
    cont = message.contact

    async with state.proxy() as data:
        rand = random.randint(1000, 9999)
        text = [
            f'*–í–∞—à –∑–∞–∫–∞–∑:* üîñ # {rand}',
            f'*–î–∞—Ç–∞* - {data["date"]}',
            f'*–£—Å–ª—É–≥–∞* - {data["service"]}',
            f'*–í—Ä–µ–º—è* - {data["time"]}',
            f'*–ú–∞—Å—Ç–µ—Ä* - {data["master"]}',
            f'*–í–∞—à –Ω–æ–º–µ—Ä* - {cont["phone_number"]}',
            "",
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ üíÅ‚Äç‚ôÄÔ∏è"
        ]
        data['random'] = rand
        data['number'] = cont["phone_number"]
        data['user_id'] = cont["user_id"]

    await check_order(message, text)

@dp.callback_query_handler(Text(startswith='check_'), state=Client.contact)
async def check_it(callback : types.CallbackQuery, state : FSMContext):

    if callback.data == 'check_ok':
        async with state.proxy() as data:
            await save_order(data["user_id"], data['random'], data['service'], data['date'], data['time']
                             , data['master'], data['number'])
            await callback.message.edit_text('–í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å ü§ó C–≤–æ–∏ –∑–∞–∫–∞–∑—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ –∫–æ–º–∞–Ω–¥–µ /myorders')
            await state.finish()
    elif callback.data == 'check_stop':
        await state.finish()
        await callback.message.edit_text('–ó–∞–∫–∞–∑ –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω üòå —ç–∫—Ä–∞–Ω –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è /start')
    else:
        await state.finish()
        await callback.message.edit_text('–î–∞–≤–∞–π—Ç–µ —Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ üòä')
        await start_state(callback.message)

@dp.callback_query_handler(Text(startswith='back__'), state='*')
async def show_category(callback : types.CallbackQuery):
    data = callback.data
    if data == 'back__':
        await main_panel_2(callback)

@dp.message_handler(commands='stop_order', state='*')
async def show_category(message : types.Message, state : FSMContext):
    await state.finish()
    # await message.delete()
    await message.reply('–ó–∞–∫–∞–∑ –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è /start')


@dp.callback_query_handler(Text(startswith='stop_order'), state='*')
async def show_category(callback : types.CallbackQuery, state : FSMContext):
    await state.finish()
    await callback.message.edit_text('–ó–∞–∫–∞–∑ –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω')

@dp.message_handler(state='*')
async def save_number(message : types.Message):

    await message.answer('–í—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ –æ—Ñ—Ä–º–ª—è—Ç—å –∑–∞—è–≤–∫—É –≤—ã—à–µ, –ª–∏–±–æ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –ª–∏–±–æ –æ—Ç–º–µ–Ω–∏—Ç–µ (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /stop_order)')